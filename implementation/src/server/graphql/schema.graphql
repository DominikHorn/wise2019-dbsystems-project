scalar Upload

scalar Date

type Query {
  getAllWahlen: [Wahl]!
  getMandate(wahlid: Int!): [Mandat]!
  getStimmkreisWinner(wahlid: Int!, erststimmen: Boolean!): [StimmkreisWinner]!
  getUeberhangMandate(wahlid: Int!): [UeberhangMandat]!
  getKnappsteKandidaten(wahlid: Int!, amountPerPartei: Int): [KnapperKandidat]!
  getWahlbeteiligung(wahlid: Int!): [Wahlbeteiligung]!
  getDirektmandat(wahlid: Int!, stimmkreisid: Int!): Mandat!
  getStimmentwicklung(
    wahlid: Int!
    vglwahlid: Int!
    stimmkreisid: Int!
  ): [Stimmentwicklung]!
  getDirektKandidaten(wahlid: Int!, stimmkreisid: Int!): [Kandidat]!
  getListenKandidaten(wahlid: Int!, regierungsbezirkid: Int!): [ListenKandidat]!

  # Wahlhelfer
  getRegisteredWahlkabinen(wahlhelferAuth: String!): [Wahlkabine]!

  # Wahlkabine
  isRegistered(wahlkabineToken: String!): Boolean!
}

type Mutation {
  importCSVData(
    wahlleiterAuth: String!
    files: [Upload]!
    wahldatum: Date!
    aggregiert: Boolean!
  ): Boolean
  computeElectionResults(wahlleiterAuth: String!): Boolean
  generateWahlhelferTokens(wahlleiterAuth: String!): [WahlhelferToken!]!
  setDataBlocked(
    wahlleiterAuth: String!
    wahlid: Int!
    blocked: Boolean!
  ): Boolean

  # Wahlhelfer
  registerWahlkabine(
    wahlhelferAuth: String!
    wahlkabineToken: String!
    wahlkabineLabel: String!
  ): Boolean!
  removeWahlkabine(wahlhelferAuth: String!, wahlkabineToken: String!): Boolean!
  setWahlkabineUnlocked(
    wahlhelferAuth: String!
    wahlkabineToken: String!
    unlocked: Boolean!
  ): Boolean!

  # Wahlkabine
  resetWahlkabine(wahlkabineToken: String!): Boolean
}

type Wahl {
  id: Int!
  wahldatum: Date!
  dataBlocked: Boolean
}

type Wahlkabine {
  wahlid: Int
  stimmkreisid: Int
  label: String!
  token: String
  unlocked: Boolean!
}

type Mandat {
  kandidat: Kandidat!
  stimmkreis: Stimmkreis
  direktmandat: Boolean!
}

type Kandidat {
  id: Int!
  name: String!
  partei: Partei!
}

type ListenKandidat {
  kandidat: Kandidat!
  platz: Int!
}

type Partei {
  id: Int!
  name: String!
}

type Stimmkreis {
  id: Int
  name: String
}

type StimmkreisWinner {
  stimmkreis: Stimmkreis!
  partei: Partei!
  anzahl: Int!
}

type Regierungsbezirk {
  id: Int!
  name: String!
}

type UeberhangMandat {
  regierungsbezirk: Regierungsbezirk!
  partei: Partei!
  ueberhang: Int!
  ausgleich: Int!
  zustehend: Int!
}

type KnapperKandidat {
  wahl: Wahl!
  stimmkreis: Stimmkreis!
  kandidat: Kandidat!
  differenz: Int!
  gewinner: Boolean!
  platz: Int!
}

type Wahlbeteiligung {
  wahl: Wahl!
  stimmkreis: Stimmkreis!
  wahlbeteiligung: Float!
}

type Stimmentwicklung {
  partei: Partei!
  vorher: Int!
  nachher: Int!
}

type WahlhelferToken {
  wahl: Wahl!
  stimmkreis: Stimmkreis!
  token: String!
}
