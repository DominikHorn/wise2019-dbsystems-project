scalar Upload

scalar Date

type Query {
  getAllWahlen: [Wahl]!
  getMandate(wahlid: Int!): [Mandat]!
  getStimmkreisWinner(wahlid: Int!, erststimmen: Boolean!): [StimmkreisWinner]!
  getUeberhangMandate(wahlid: Int!): [UeberhangMandat]!
  getKnappsteKandidaten(wahlid: Int!, amountPerPartei: Int): [KnapperKandidat]!
  getWahlbeteiligung(wahlid: Int!): [Wahlbeteiligung]!
  getDirektmandat(wahlid: Int!, stimmkreisid: Int!): Mandat!
  getStimmentwicklung(
    wahlid: Int!
    vglwahlid: Int!
    stimmkreisid: Int!
  ): [Stimmentwicklung]!
}

type Mutation {
  importCSVData(
    files: [Upload]!
    wahldatum: Date!
    aggregiert: Boolean!
  ): Boolean
  computeElectionResults: Boolean
  generateWahlhelferTokens(
    wahlid: Int!
    wahlleiterPassword: String
  ): [WahlToken]!
}

type WahlToken {
  wahl: Wahl!
  stimmkreis: Stimmkreis!
  token: String!
}

type Wahl {
  id: Int!
  wahldatum: Date!
}

type Mandat {
  kandidat: Kandidat!
  stimmkreis: Stimmkreis
  direktmandat: Boolean!
}

type Kandidat {
  id: Int!
  name: String!
  partei: Partei!
}

type Partei {
  id: Int!
  name: ParteiName!
}

type Stimmkreis {
  id: Int
  name: String
}

type StimmkreisWinner {
  stimmkreis: Stimmkreis!
  partei: Partei!
  anzahl: Int!
}

type Regierungsbezirk {
  id: Int!
  name: String!
}

type UeberhangMandat {
  regierungsbezirk: Regierungsbezirk!
  partei: Partei!
  ueberhang: Int!
  ausgleich: Int!
  zustehend: Int!
}

type KnapperKandidat {
  wahl: Wahl!
  stimmkreis: Stimmkreis!
  kandidat: Kandidat!
  differenz: Int!
  gewinner: Boolean!
  platz: Int!
}

type Wahlbeteiligung {
  wahl: Wahl!
  stimmkreis: Stimmkreis!
  wahlbeteiligung: Float!
}

type Stimmentwicklung {
  partei: Partei!
  vorher: Int!
  nachher: Int!
}

enum ParteiName {
  CSU
  SPD
  FREIE_WAEHLER
  GRUENE
  FDP
  DIE_LINKE
  BAYERN_PARTEI
  OEDP
  PIRATEN
  DIE_FRANKEN
  AFD
  LKR
  MUT
  DIE_HUMANISTEN
  DIE_PARTEI
  GESUNDHEITSFORSCHUNG
  TIERSCHUTZPARTEI
  V_PARTEI
}
