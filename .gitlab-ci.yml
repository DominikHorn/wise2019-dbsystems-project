stages:
- build-level0
- build-level1
- deploy

build-uml-pdf:
  stage: build-level0
  script:
# Prevent interactive installations, i.e., force all apt-get installs into headless mode and update apt
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
# Remove all currently installed nodejs versions
  - apt autoremove -y nodejs
# Install n to upgrade to latest nodejs version
  - git clone https://github.com/tj/n.git; cd n; make install; cd ..; rm -rf n;
  - n 8
  - node --version
  - npm --version
# Dependencies of Canvas tool required to install mdgen
  - apt-get install -y build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev
# Install mdgen and generate pdf model output
  - npm install mdgen
  - node node_modules/mdgen/bin/mdgen.js pdf -m specification/model.mdj -o specification/model.pdf
  artifacts:
    paths:
    - specification/model.pdf

build-lastenheft-pdf:
  stage: build-level1
  dependencies:
  - build-uml-pdf
  script:
# Prevent interactive installations, i.e., force all apt-get installs into headless mode
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
# Install all required latex tools and dependencies
  - apt-get install -y texlive-latex-base texlive-fonts-recommended texlive-metapost texlive-lang-german texlive-latex-extra
# generate Lastenheft pdf
  - cd specification/Lastenheft
  - make
  artifacts:
    paths:
    - specification/Lastenheft/Lastenheft.pdf

deploy-artifacts-to-wiki:
  stage: deploy
  only:
  - master
  dependencies:
  - build-uml-pdf
  - build-lastenheft-pdf
  script:
# Configure global vars + install jq for parsing curl json responses
  - "NOW=$(date +\"%d_%m_%Y\")"
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get install -y jq
# Exit when any command fails
  - set -e
# Create specification file that bundles built artifacts
  - SPECIFICATION_UPLOAD_FILE=specification_$NOW_$CI_COMMIT_SHA.tar.gz
  - tar -czvf $SPECIFICATION_UPLOAD_FILE specification/Lastenheft/Lastenheft.pdf specification/model.pdf
# Upload specification bundle + obtain uploaded files response
  - "JSON_UPLOAD_RESULT=$(curl --request POST --header  \"PRIVATE-TOKEN: $DEPLOY_TOKEN\" --form \"file=@$SPECIFICATION_UPLOAD_FILE\" $CI_API_V4_URL/projects/$CI_PROJECT_ID/wikis/attachments)"
  - "SPECIFICATION_UPLOAD_URL=$(echo \"$JSON_UPLOAD_RESULT\" | jq \".link.url\")"
  - "JSON_BUILDSWIKI_RESULT=$(curl --header \"PRIVATE-TOKEN: $DEPLOY_TOKEN\" $CI_API_V4_URL/projects/$CI_PROJECT_ID/wikis/Builds)"
  - "BUILDS_WIKI_CONTENT=$(echo $JSON_BUILDSWIKI_RESULT | jq -r \".content\")"
  - "curl --request PUT --data \"content=$(sed -e 's/^\"//' -e 's/\"$//' <<<\"$BUILDS_WIKI_CONTENT\")\r\n| $NOW | $CI_COMMIT_SHA | [$SPECIFICATION_UPLOAD_FILE]($SPECIFICATION_UPLOAD_URL) |\" --header \"PRIVATE-TOKEN: $DEPLOY_TOKEN\" $CI_API_V4_URL/projects/$CI_PROJECT_ID/wikis/Builds"
